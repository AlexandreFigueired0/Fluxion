name: Build and release Go CLI

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  create_release:
    name: Create GitHub Release (tag)
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          body: "Release ${{ github.ref_name }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_and_upload:
    name: Build binaries and upload to release
    needs: create_release
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner: [ubuntu-latest, macos-latest, windows-latest]
        arch: [amd64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build and package
        id: build_package
        run: |
          # Map runner to GOOS
          case "${{ matrix.runner }}" in
            ubuntu-latest) GOOS=linux ;;
            macos-latest) GOOS=darwin ;;
            windows-latest) GOOS=windows ;;
          esac

          GOARCH=${{ matrix.arch }}

          # Binary name: change this if your binary name differs
          BINARY_NAME=mycli

          OUT_DIR=dist
          mkdir -p "$OUT_DIR"

          EXT=""
          if [ "$GOOS" = "windows" ]; then
            EXT=.exe
          fi

          OUT_FILE="${BINARY_NAME}_${GOOS}_${GOARCH}${EXT}"

          echo "Building for GOOS=$GOOS GOARCH=$GOARCH -> $OUT_DIR/$OUT_FILE"
          env GOOS=$GOOS GOARCH=$GOARCH go build -ldflags='-s -w' -o "$OUT_DIR/$OUT_FILE" ./...

          # Package: zip for Windows, tar.gz for others
          if [ "$GOOS" = "windows" ]; then
            ZIP_PATH="$OUT_DIR/${OUT_FILE}.zip"
            zip -j "$ZIP_PATH" "$OUT_DIR/$OUT_FILE"
            echo "ASSET_PATH=$ZIP_PATH" >> $GITHUB_ENV
            echo "ASSET_NAME=${OUT_FILE}.zip" >> $GITHUB_ENV
            echo "CONTENT_TYPE=application/zip" >> $GITHUB_ENV
          else
            TAR_PATH="$OUT_DIR/${OUT_FILE}.tar.gz"
            tar -C "$OUT_DIR" -czf "$TAR_PATH" "$OUT_FILE"
            echo "ASSET_PATH=$TAR_PATH" >> $GITHUB_ENV
            echo "ASSET_NAME=${OUT_FILE}.tar.gz" >> $GITHUB_ENV
            echo "CONTENT_TYPE=application/gzip" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Upload asset to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: ${{ env.CONTENT_TYPE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
